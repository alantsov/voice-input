name: CI

on:
  workflow_call:

jobs:
  build:
    name: Build (${{ matrix.features || 'default' }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        features: ["", "tray-icon"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update -qy
          sudo apt-get install -qy \
            build-essential curl git pkg-config cmake \
            libssl-dev \
            libasound2-dev \
            libx11-dev libxtst-dev libxi-dev libxkbcommon-dev \
            libxcb-shape0-dev libxcb-xfixes0-dev \
            clang llvm-dev libclang-dev
          if [ "${{ matrix.features }}" = "tray-icon" ]; then
            sudo apt-get install -qy libgtk-3-dev libayatana-appindicator3-dev
            # Add NVIDIA's repository for the CUDA toolkit
            wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-archive-keyring.gpg
            sudo mv cuda-archive-keyring.gpg /usr/share/keyrings/
            echo "deb [signed-by=/usr/share/keyrings/cuda-archive-keyring.gpg] https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/ /" \
            | sudo tee /etc/apt/sources.list.d/cuda.list > /dev/null
            sudo apt-get update -qy
            # Install a modern CUDA toolkit compatible with GCC 11
            sudo apt-get install -qy cuda-toolkit-12-4
          fi

      - name: Add CUDA to PATH
        if: matrix.features == 'tray-icon'
        run: echo "/usr/local/cuda/bin" >> $GITHUB_PATH

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo builds
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$(llvm-config --libdir)" >> $GITHUB_ENV

      - name: Sanity check libclang
        run: |
          ls -l "$LIBCLANG_PATH/libclang.so" || (echo "libclang.so not found in $LIBCLANG_PATH" && exit 1)

      - name: Build
        run: |
          if [ -z "${{ matrix.features }}" ]; then
            cargo build --release
          else
            cargo build --release --features "${{ matrix.features }}"
          fi

  package-deb:
    name: Build .deb (tray-icon + cuda)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install packaging and build dependencies
        run: |
          sudo apt-get update -qy
          # Add NVIDIA's repository for the CUDA toolkit
          sudo apt-get install -qy wget gnupg
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-archive-keyring.gpg
          sudo mv cuda-archive-keyring.gpg /usr/share/keyrings/
          echo "deb [signed-by=/usr/share/keyrings/cuda-archive-keyring.gpg] https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/ /" \
          | sudo tee /etc/apt/sources.list.d/cuda.list > /dev/null
          sudo apt-get update -qy
          # Install dependencies including a modern CUDA toolkit
          sudo apt-get install -qy \
            build-essential curl git pkg-config cmake \
            debhelper dpkg-dev fakeroot \
            cargo rustc \
            libssl-dev \
            libasound2-dev \
            libx11-dev libxtst-dev libxi-dev libxkbcommon-dev \
            libxcb-shape0-dev libxcb-xfixes0-dev \
            libgtk-3-dev libayatana-appindicator3-dev \
            clang llvm-dev libclang-dev \
            cuda-toolkit-12-4

      - name: Add CUDA to PATH
        run: echo "/usr/local/cuda/bin" >> $GITHUB_PATH

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo builds
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$(llvm-config --libdir)" >> $GITHUB_ENV

      - name: Sanity check libclang
        run: |
          ls -l "$LIBCLANG_PATH/libclang.so" || (echo "libclang.so not found in $LIBCLANG_PATH" && exit 1)

      - name: Build Debian package (.deb)
        run: |
          dpkg-buildpackage -us -uc -b -d

      - name: Upload Debian package artifact
        uses: actions/upload-artifact@v4
        with:
          name: voice-input-deb
          path: |
            ../voice-input_*.deb