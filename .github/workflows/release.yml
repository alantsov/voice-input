name: Build and Release Debian Package

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build-deb:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.88.0
        override: true
        components: rustfmt, clippy

    - name: Install packaging and build dependencies
      run: |
        sudo apt-get update -qy
        sudo apt-get install -qy \
          build-essential curl git pkg-config cmake \
          debhelper dpkg-dev fakeroot dh-make \
          cargo rustc \
          libssl-dev \
          libasound2-dev \
          libx11-dev libxtst-dev libxi-dev libxkbcommon-dev \
          libxcb-shape0-dev libxcb-xfixes0-dev \
          libgtk-3-dev libayatana-appindicator3-dev \
          clang llvm-dev libclang-dev \
          nvidia-cuda-toolkit nvidia-cuda-dev libcublas-dev

    - name: Set LIBCLANG_PATH
      run: echo "LIBCLANG_PATH=$(llvm-config --libdir)" >> $GITHUB_ENV

    - name: Sanity check libclang
      run: |
        ls -l "$LIBCLANG_PATH/libclang.so" || (echo "libclang.so not found in $LIBCLANG_PATH" && exit 1)

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build Rust project
      run: cargo build --release

    - name: Extract version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Update changelog with current version
      run: |
        # Update the version in changelog if needed
        sed -i "1s/voice-input (0.1.3-1)/voice-input (${{ steps.get_version.outputs.VERSION }}-1)/" debian/changelog

    - name: Build Debian package
      run: |
        chmod +x build_deb.sh
        ./build_deb.sh

    - name: Find built .deb file
      id: find_deb
      run: |
        DEB_FILE=$(ls -1t ../voice-input_*.deb | head -1)
        if [ -z "$DEB_FILE" ]; then
          echo "No .deb file found!"
          exit 1
        fi
        DEB_NAME=$(basename "$DEB_FILE")
        echo "DEB_FILE=$DEB_FILE" >> $GITHUB_OUTPUT
        echo "DEB_NAME=$DEB_NAME" >> $GITHUB_OUTPUT
        echo "Found .deb file: $DEB_FILE"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        body: |
          ## Voice Input ${{ steps.get_version.outputs.VERSION }}

          ### Installation
          Download the .deb package and install with:
          ```bash
          sudo dpkg -i ${{ steps.find_deb.outputs.DEB_NAME }}
          sudo apt-get -f install  # Fix any missing dependencies
          ```

          ### Changes
          See the changelog for details about this release.

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_deb.outputs.DEB_FILE }}
        asset_name: ${{ steps.find_deb.outputs.DEB_NAME }}
        asset_content_type: application/vnd.debian.binary-package

  # Optional: Also create packages for different architectures
  build-deb-arm64:
    runs-on: ubuntu-latest
    if: false  # Set to true if you want to build for ARM64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up cross-compilation for ARM64
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Set up Rust with ARM64 target
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.88.0
        target: aarch64-unknown-linux-gnu
        override: true

    - name: Configure cargo for cross-compilation
      run: |
        mkdir -p ~/.cargo
        cat >> ~/.cargo/config.toml << EOF
        [target.aarch64-unknown-linux-gnu]
        linker = "aarch64-linux-gnu-gcc"
        EOF

    - name: Build for ARM64
      run: cargo build --release --target aarch64-unknown-linux-gnu

    # Additional steps for ARM64 package building would go here
